# Import the necessary libraries
import tensorflow as tf
import keras
from tensorflow.keras import layers

# Specify the input. If not, it can be problematic when we try to calculate things.
inputs = keras.Input(shape=(784,), name="pixels")

# Create the architecture of a neural network with
# 3 layers (number of neurons on each layer, activation function, name(optional))
x = layers.Dense(65, activation="relu", name="layer1")(inputs)
x = layers.Dense(65, activation="relu", name="hidden_layer")(x)
outputs = layers.Dense(10, activation="softmax", name="predicted_outputs")(x)

model = keras.Model(inputs=inputs, outputs=outputs)

# Load the mnist data
(x_train, y_train), (x_test, y_test) = keras.datasets.mnist.load_data()

# Preprocess the data
x_train = x_train.reshape(60000, 784).astype("float32") / 255
x_test = x_test.reshape(10000, 784).astype("float32") / 255

y_train = y_train.astype("float32")
y_test = y_test.astype("float32")

# Reserve 10,000 samples for validation
x_val = x_train[-10000:]
y_val = y_train[-10000:]
x_train = x_train[:-10000]
y_train = y_train[:-10000]

# Training config
model.compile(
    # Optimizer
    optimizer=keras.optimizers.RMSprop(learning_rate=0.001),
    # Loss function
    loss=keras.losses.SparseCategoricalCrossentropy(),
    # A list of metrics for monitoring
    metrics=[keras.metrics.SparseCategoricalAccuracy()],
)
# Train the model by dividing the data into batches and keep training for a set
# number of epochs
training = model.fit(x_train, 
                    y_train, 
                    batch_size=50, 
                    epochs=10, 
                    validation_data=(x_val, y_val))
